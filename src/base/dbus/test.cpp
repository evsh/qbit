/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp org.qbittorrent.session.xml -a test
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "test.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class SessionAdaptor
 */

SessionAdaptor::SessionAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

SessionAdaptor::~SessionAdaptor()
{
    // destructor
}

QStringList SessionAdaptor::allTorrents() const
{
    // get the value of property allTorrents
    return qvariant_cast< QStringList >(parent()->property("allTorrents"));
}

QStringList SessionAdaptor::categories() const
{
    // get the value of property categories
    return qvariant_cast< QStringList >(parent()->property("categories"));
}

bool SessionAdaptor::hasActiveTorrents() const
{
    // get the value of property hasActiveTorrents
    return qvariant_cast< bool >(parent()->property("hasActiveTorrents"));
}

bool SessionAdaptor::hasUnfinishedTorrents() const
{
    // get the value of property hasUnfinishedTorrents
    return qvariant_cast< bool >(parent()->property("hasUnfinishedTorrents"));
}

QStringList SessionAdaptor::listTorrents(const QStringList &status, const QStringList &categories)
{
    // handle method call org.qbittorrent.Session.listTorrents
    QStringList torrents;
    QMetaObject::invokeMethod(parent(), "listTorrents", Q_RETURN_ARG(QStringList, torrents), Q_ARG(QStringList, status), Q_ARG(QStringList, categories));
    return torrents;
}

QStringList SessionAdaptor::torrentContentsBrief(const QString &hash)
{
    // handle method call org.qbittorrent.Session.torrentContentsBrief
    QStringList content;
    QMetaObject::invokeMethod(parent(), "torrentContentsBrief", Q_RETURN_ARG(QStringList, content), Q_ARG(QString, hash));
    return content;
}

QStringList SessionAdaptor::torrentContentsWithSizes(const QString &hash, QList<int> &size, QList<int> &remaining)
{
    // handle method call org.qbittorrent.Session.torrentContentsWithSizes
    //return static_cast<YourObjectType *>(parent())->torrentContentsWithSizes(hash, size, remaining);
}

QString SessionAdaptor::torrentName(const QString &hash)
{
    // handle method call org.qbittorrent.Session.torrentName
    QString name;
    QMetaObject::invokeMethod(parent(), "torrentName", Q_RETURN_ARG(QString, name), Q_ARG(QString, hash));
    return name;
}

int SessionAdaptor::torrentSize(const QString &hash, int &totalSize, int &remaining)
{
    // handle method call org.qbittorrent.Session.torrentSize
    //return static_cast<YourObjectType *>(parent())->torrentSize(hash, totalSize, remaining);
    for (f: colll) {
        dosthg();
    }
}


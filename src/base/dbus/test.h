/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp org.qbittorrent.session.xml -a test
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef TEST_H
#define TEST_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.qbittorrent.Session
 */
class SessionAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.qbittorrent.Session")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.qbittorrent.Session\">\n"
"    <property access=\"read\" type=\"as\" name=\"allTorrents\"/>\n"
"    <method name=\"listTorrents\">\n"
"      <arg direction=\"in\" type=\"as\" name=\"status\"/>\n"
"      <arg direction=\"in\" type=\"as\" name=\"categories\"/>\n"
"      <arg direction=\"out\" type=\"as\" name=\"torrents\"/>\n"
"    </method>\n"
"    <property access=\"read\" type=\"as\" name=\"categories\"/>\n"
"    <method name=\"torrentName\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"hash\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"name\"/>\n"
"    </method>\n"
"    <method name=\"torrentSize\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"hash\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"size\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"totalSize\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"remaining\"/>\n"
"    </method>\n"
"    <method name=\"torrentContentsBrief\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"hash\"/>\n"
"      <arg direction=\"out\" type=\"as\" name=\"content\"/>\n"
"    </method>\n"
"    <method name=\"torrentContentsWithSizes\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"hash\"/>\n"
"      <arg direction=\"out\" type=\"as\" name=\"content\"/>\n"
"      <annotation value=\"QList&lt;int&gt;\" name=\"org.qtproject.QtDBus.QtTypeName.Out1\"/>\n"
"      <arg direction=\"out\" type=\"ai\" name=\"size\"/>\n"
"      <annotation value=\"QList&lt;int&gt;\" name=\"org.qtproject.QtDBus.QtTypeName.Out2\"/>\n"
"      <arg direction=\"out\" type=\"ai\" name=\"remaining\"/>\n"
"    </method>\n"
"    <property access=\"read\" type=\"b\" name=\"hasActiveTorrents\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"hasUnfinishedTorrents\"/>\n"
"    <signal name=\"torrentsUpdated\"/>\n"
"    <signal name=\"addTorrentFailed\">\n"
"      <arg type=\"s\" name=\"error\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentAdded\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentAboutToBeRemoved\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentPaused\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentResumed\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentFinished\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentFinishedChecking\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentSavePathChanged\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentCategoryChanged\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"s\" name=\"oldCategory\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentSavingModeChanged\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"allTorrentsFinished\"/>\n"
"    <signal name=\"metadataLoaded\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"torrentMetadataLoaded\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"fullDiskError\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"s\" name=\"msg\"/>\n"
"    </signal>\n"
"    <signal name=\"trackerSuccess\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"s\" name=\"tracker\"/>\n"
"    </signal>\n"
"    <signal name=\"trackerWarning\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"s\" name=\"tracker\"/>\n"
"    </signal>\n"
"    <signal name=\"trackerError\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"s\" name=\"tracker\"/>\n"
"    </signal>\n"
"    <signal name=\"trackerAuthenticationRequired\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"recursiveTorrentDownloadPossible\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"speedLimitModeChanged\">\n"
"      <arg type=\"b\" name=\"alternative\"/>\n"
"    </signal>\n"
"    <signal name=\"ipFilterParsed\">\n"
"      <arg type=\"b\" name=\"error\"/>\n"
"      <arg type=\"i\" name=\"ruleCount\"/>\n"
"    </signal>\n"
"    <signal name=\"trackersAdded\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"as\" name=\"trackers\"/>\n"
"    </signal>\n"
"    <signal name=\"trackersRemoved\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"as\" name=\"trackers\"/>\n"
"    </signal>\n"
"    <signal name=\"trackersChanged\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"    </signal>\n"
"    <signal name=\"trackerlessStateChanged\">\n"
"      <arg type=\"s\" name=\"hash\"/>\n"
"      <arg type=\"b\" name=\"trackerless\"/>\n"
"    </signal>\n"
"    <signal name=\"downloadFromUrlFailed\">\n"
"      <arg type=\"s\" name=\"url\"/>\n"
"      <arg type=\"s\" name=\"reason\"/>\n"
"    </signal>\n"
"    <signal name=\"downloadFromUrlFinished\">\n"
"      <arg type=\"s\" name=\"url\"/>\n"
"    </signal>\n"
"    <signal name=\"categoryAdded\">\n"
"      <arg type=\"s\" name=\"categoryName\"/>\n"
"    </signal>\n"
"    <signal name=\"categoryRemoved\">\n"
"      <arg type=\"s\" name=\"categoryName\"/>\n"
"    </signal>\n"
"    <signal name=\"subcategoriesSupportChanged\"/>\n"
"  </interface>\n"
        "")
public:
    SessionAdaptor(QObject *parent);
    virtual ~SessionAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QStringList allTorrents READ allTorrents)
    QStringList allTorrents() const;

    Q_PROPERTY(QStringList categories READ categories)
    QStringList categories() const;

    Q_PROPERTY(bool hasActiveTorrents READ hasActiveTorrents)
    bool hasActiveTorrents() const;

    Q_PROPERTY(bool hasUnfinishedTorrents READ hasUnfinishedTorrents)
    bool hasUnfinishedTorrents() const;

public Q_SLOTS: // METHODS
    QStringList listTorrents(const QStringList &status, const QStringList &categories);
    QStringList torrentContentsBrief(const QString &hash);
    QStringList torrentContentsWithSizes(const QString &hash, QList<int> &size, QList<int> &remaining);
    QString torrentName(const QString &hash);
    int torrentSize(const QString &hash, int &totalSize, int &remaining);
Q_SIGNALS: // SIGNALS
    void addTorrentFailed(const QString &error);
    void allTorrentsFinished();
    void categoryAdded(const QString &categoryName);
    void categoryRemoved(const QString &categoryName);
    void downloadFromUrlFailed(const QString &url, const QString &reason);
    void downloadFromUrlFinished(const QString &url);
    void fullDiskError(const QString &hash, const QString &msg);
    void ipFilterParsed(bool error, int ruleCount);
    void metadataLoaded(const QString &hash);
    void recursiveTorrentDownloadPossible(const QString &hash);
    void speedLimitModeChanged(bool alternative);
    void subcategoriesSupportChanged();
    void torrentAboutToBeRemoved(const QString &hash);
    void torrentAdded(const QString &hash);
    void torrentCategoryChanged(const QString &hash, const QString &oldCategory);
    void torrentFinished(const QString &hash);
    void torrentFinishedChecking(const QString &hash);
    void torrentMetadataLoaded(const QString &hash);
    void torrentPaused(const QString &hash);
    void torrentResumed(const QString &hash);
    void torrentSavePathChanged(const QString &hash);
    void torrentSavingModeChanged(const QString &hash);
    void torrentsUpdated();
    void trackerAuthenticationRequired(const QString &hash);
    void trackerError(const QString &hash, const QString &tracker);
    void trackerSuccess(const QString &hash, const QString &tracker);
    void trackerWarning(const QString &hash, const QString &tracker);
    void trackerlessStateChanged(const QString &hash, bool trackerless);
    void trackersAdded(const QString &hash, const QStringList &trackers);
    void trackersChanged(const QString &hash);
    void trackersRemoved(const QString &hash, const QStringList &trackers);
};

#endif
